// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Passion {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  icon        String
  translations   PassionTranslation[]   
}

model PassionTranslation {
  id          Int      @id @default(autoincrement())
  passionId   Int
  language    String   // 'fr', 'en', 'es', etc.
  translatedName String

  passion     Passion  @relation(fields: [passionId], references: [id])
  @@unique([passionId, language])  // Uniquement une traduction par langue
}

model Project {
  id             Int                   @id @default(autoincrement())
  name           String
  description    String
  processDetails String
  images         Image[]
  liveSiteUrl    String
  githubRepoUrl  String
  createdYear    Int
  duration       String
  technologies   Technology[]         // Many-to-many relation
  roles          Role[]               // Many-to-many relation
  createdAt      DateTime             @default(now())
  translations   ProjectTranslation[] // Traductions associ√©es
}

model ProjectTranslation {
  id              Int      @id @default(autoincrement())
  projectId       Int
  language        String   // 'fr', 'en', 'es', etc.
  translatedDescription String
  translatedProcessDetails String

  project         Project  @relation(fields: [projectId], references: [id])
  @@unique([projectId, language]) // Une seule traduction par langue par projet
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Technology {
  id        Int       @id @default(autoincrement())
  name      String
  projects  Project[] // Many-to-many relation
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  projects  Project[] // Many-to-many relation
}


model Skills {
  id              Int                 @id @default(autoincrement())
  year            Int
  description     String
  location        String
  img             String
  translations    SkillsTranslation[]
}

model SkillsTranslation {
  id              Int      @id @default(autoincrement())
  skillId         Int
  language        String   // 'fr', 'en', 'es', etc.
  translatedDescription String
  translatedLocation String

  skill           Skills   @relation(fields: [skillId], references: [id])
  @@unique([skillId, language])  // Uniquement une traduction par langue
}
